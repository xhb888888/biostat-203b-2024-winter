---
title: "Biostat 203B Homework 3"
subtitle: "Due Feb 23 @ 11:59PM"
author: "Hanbei Xiong 605257780"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
execute:
  eval: false    
---

Display machine information for reproducibility:

```{r}
sessionInfo()
```

Load necessary libraries (you can add more as needed).

```{r setup}
library(arrow)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
library(gtsummary)
```

Display your machine memory.

```{r}
memuse::Sys.meminfo()
```

In this exercise, we use tidyverse (ggplot2, dplyr, etc) to explore the [MIMIC-IV](https://mimic.mit.edu/docs/iv/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2024winter/hw/hw1/hw1.html) and to build a cohort of ICU stays.

## Q1. Visualizing patient trajectory

Visualizing a patient's encounters in a health care system is a common task in clinical data analysis. In this question, we will visualize a patient's ADT (admission-discharge-transfer) history and ICU vitals in the MIMIC-IV data.

### Q1.1 ADT history

A patient's ADT history records the time of admission, discharge, and transfer in the hospital. This figure shows the ADT history of the patient with `subject_id` 10001217 in the MIMIC-IV data. The x-axis is the calendar time, and the y-axis is the type of event (ADT, lab, procedure). The color of the line segment represents the care unit. The size of the line segment represents whether the care unit is an ICU/CCU. The crosses represent lab events, and the shape of the dots represents the type of procedure. The title of the figure shows the patient's demographic information and the subtitle shows top 3 diagnoses.

![](10001217_adt.png) Do a similar visualization for the patient with `subject_id` 10013310 using ggplot.

Hint: We need to pull information from data files `patients.csv.gz`, `admissions.csv.gz`, `transfers.csv.gz`, `labevents.csv.gz`, `procedures_icd.csv.gz`, `diagnoses_icd.csv.gz`, `d_icd_procedures.csv.gz`, and `d_icd_diagnoses.csv.gz`. For the big file `labevents.csv.gz`, use the Parquet format you generated in Homework 2. For reproducibility, make the Parquet folder `labevents_pq` available at the current working directory `hw3`, for example, by a symbolic link. Make your code reproducible.

```{r}
# loading data
patients <- read_csv("~/mimic/hosp/patients.csv.gz")
admission <- read_csv("~/mimic/hosp/admissions.csv.gz")
transfers <- read_csv("~/mimic/hosp/transfers.csv.gz")
procedures_icd <- read_csv("~/mimic/hosp/procedures_icd.csv.gz")
diagnoses_icd <- read_csv("~/mimic/hosp/diagnoses_icd.csv.gz")
d_icd_procedures <- read_csv("~/mimic/hosp/d_icd_procedures.csv.gz")
d_icd_diagnoses <- read_csv("~/mimic/hosp/d_icd_diagnoses.csv.gz")
labevents <- arrow::open_dataset("./labevents_pq") |>
  collect()
```

```{r}
# change subject_id to reproduce result for any patient 
id = 10013310
```

```{r}

procedure_info = procedures_icd |> 
  # exclude rows with other subject id
  filter(subject_id == id) |>
  # join table to get the type procedures 
  left_join(d_icd_procedures, by = "icd_code") |>
  # convert date variable to POSIXct format
  mutate(chartdate = as.POSIXct(chartdate, format = "%Y-%m-%d")) |>
  # represent the type of procedures with first 30 characters
  mutate(long_title = str_sub(long_title, 1, 30))


diagnoses_info = diagnoses_icd |> 
  # exclude rows with other subject id
  filter(subject_id == id) |> 
  # join table to get the type diagnoses
  left_join(d_icd_diagnoses, by = "icd_code") |> 
  # get the occurance of each diagnoses and sort by occurance 
  count(long_title, sort = TRUE) 
```

```{r}
# exclude rows with other subject id
patients_filtered <- patients |> filter(subject_id == id)

admission_filtered <- admission |> 
  # exclude rows with other subject id
  filter(subject_id == id) |> 
  # keep one unique row and all variables
  distinct(subject_id, .keep_all = TRUE)

# create a new variable to indicate whether the care unit is an ICU/CCU
transfer_icu <- transfers  |> 
  # exclude rows with other subject id
  filter(subject_id == id) |> 
  # create a new variable to indicate whether the care unit is in ICU/CCU 
  mutate(icu_status = ifelse(str_detect(careunit, "ICU|CCU"), 
                      "ICU/CCU", "non-ICU/CCU"))

```

```{r}
# store subject_id of the patient
id_char = toString(patients_filtered['subject_id'])
# store gender of the patient
gender_char = toString(patients_filtered['gender'])
# store recorded age of the patient
age_char = toString(patients_filtered['anchor_age'])
# store race of the patient
race_char = toString(admission_filtered['race'])

# store top three most occurrence diagonsis of the patient
diagnoses_info_1 = diagnoses_info['long_title'] |> slice(1)
diagnoses_info_2 = diagnoses_info['long_title'] |> slice(2)
diagnoses_info_3 = diagnoses_info['long_title'] |> slice(3)

# create title and subtitle
title = paste0("Patient ", id_char, ", ", gender_char, ", ", age_char, " years old, ", race_char)
subtitle = paste0(diagnoses_info_1, "\n", diagnoses_info_2, "\n", diagnoses_info_3)
```

```{r}
# data visualization
ggplot() +
  # create a line segment to represent the hospital stay and use 
  # different color of segment to represent stays in different care units
  geom_segment(data = transfer_icu, 
               aes(x = intime, xend = outtime, y = 3, yend = 3,  
                   color = careunit),
               # adjust the width of the line segment of indicate icu stay
               linewidth = ifelse(transfer_icu$icu_status == 'ICU/CCU', 4, 1)) +
  # create points to represent the charted lab events with the specific 
  # subject id
  geom_point(data = labevents |> filter(subject_id == id), 
             aes(x = charttime, y = 2), shape = 3, size = 1) +
  # create points to represent the charted procedures and use different
  # shape of points to represent different procedures
  geom_point(data = procedure_info, 
             aes(x = chartdate, y = 1, shape = long_title), size = 3) +  
  # rename the legend for care units
  scale_color_discrete(name = "Care Unit") +
  # rename the legend for procedures and manually assign shapes
  scale_shape_manual(values=c(1:8), name = "Procedure") +
  # rename the x and y axis
  xlab('Calender Time') +
  ylab('') +
  # adjust the theme of the legend
  theme(
    legend.text = element_text(size = 6),
    legend.position = "bottom",
    legend.box = "vertical",
    legend.title.align = 0,
    legend.direction = 'horizontal') +
  # assign name to each plot on y axis
  scale_y_continuous(breaks = 1:3, labels = c("Procedure", "Lab", "ADT")) + 
  # assign title and subtitle
  ggtitle(label = title, subtitle = subtitle)

```

### Q1.2 ICU stays

ICU stays are a subset of ADT history. This figure shows the vitals of the patient `10001217` during ICU stays. The x-axis is the calendar time, and the y-axis is the value of the vital. The color of the line represents the type of vital. The facet grid shows the abbreviation of the vital and the stay ID.

![](10001217_icu.png)

Do a similar visualization for the patient `10013310`.



```{r}
# manually adjust this subject id to display information for other patient
id = 10013310
```

```{r}
# read in vitals information
d_items <- read_csv("~/mimic/icu/d_items.csv.gz")

# read in chartevents information and exclude rows with other subject id
chartevents <- arrow::open_dataset("./chartevents_pq") |> 
  filter(subject_id == id) |>
  collect()

# read in icu stays information and exclude rows with other subject id
icustays <- read_csv("~/mimic/icu/icustays.csv.gz") |>
  filter(subject_id == id)
```

```{r}
# filter out the vitals and variables that are not of interest 
d_items <- d_items |> 
  filter(itemid %in% c(220045, 220179, 220180, 223761, 220210)) |>
  select(itemid, abbreviation)
```

```{r}
# filter out the vitals that are not of interest and join with d_items to 
# get the abbreviation of vitals
chartevents <- chartevents |> 
  filter(itemid %in% d_items$itemid) |>
  left_join(d_items, by = "itemid")
```

```{r}
# plot vitals during each ICU stays
ggplot(chartevents, aes(x = charttime, y = valuenum, color = abbreviation)) +
  geom_point() +
  geom_line() +
  # set x and y scales of each facet to be free
  facet_grid(abbreviation ~stay_id, scales = "free") +
  # turn off legend
  theme(legend.position = "none") +
  # add title
  ggtitle(label = paste0("Patient ", id, " ICU stays - Vitals")) +
  # adjust x axis to display date and time in a more readable format
  scale_x_datetime(guide = guide_axis(n.dodge = 2))

```

```{bash}
ls -l ~/mimic/icu/
```

```{bash}
zcat < ~/mimic/icu/icustays.csv.gz | head
```

## Q2. ICU stays

`icustays.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/icustays/>) contains data about Intensive Care Units (ICU) stays. The first 10 lines are

```{bash}
zcat < ~/mimic/icu/icustays.csv.gz | head
```

### Q2.1 Ingestion

Import `icustays.csv.gz` as a tibble `icustays_tble`.

```{r}
#| eval: true

# read in icu stays information
icustays_tble <- read_csv("~/mimic/icu/icustays.csv.gz") |>
  collect()
```

### Q2.2 Summary and visualization

How many unique `subject_id`? Can a `subject_id` have multiple ICU stays? Summarize the number of ICU stays per `subject_id` by graphs.

**Answer:** There are 50920 unique `subject_id`. A `subject_id` can have multiple ICU stays. The number of ICU stays per `subject_id` is shown in the following figure.

```{r}
# summarize the number of unique subject_id
icustays_tble |> 
  select(subject_id) |>
  unique() |>
  count()
```

```{r}
# summarize the number of ICU stays per subject_id by graphs
icustays_tble |> 
  count(subject_id) |>
  ggplot(aes(x = n)) +
  geom_bar() +
  xlab("Number of ICU stays") +
  ylab("Number of patients")
```

## Q3. `admissions` data

Information of the patients admitted into hospital is available in `admissions.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/admissions/> for details of each field in this file. The first 10 lines are

```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | head
```

### Q3.1 Ingestion

Import `admissions.csv.gz` as a tibble `admissions_tble`.

```{r}
#| eval: true

# read in admissions information
admissions_tble <- read_csv("~/mimic/hosp/admissions.csv.gz") |>
  collect()
```

### Q3.2 Summary and visualization

Summarize the following information by graphics and explain any patterns you see.

-   number of admissions per patient\
-   admission hour (anything unusual?)\
-   admission minute (anything unusual?)\
-   length of hospital stay (from admission to discharge) (anything unusual?)

According to the [MIMIC-IV documentation](https://mimic.mit.edu/docs/iv/about/concepts/#date-shifting),

> All dates in the database have been shifted to protect patient confidentiality. Dates will be internally consistent for the same patient, but randomly distributed in the future. Dates of birth which occur in the present time are not true dates of birth. Furthermore, dates of birth which occur before the year 1900 occur if the patient is older than 89. In these cases, the patient's age at their first admission has been fixed to 300.

**Answer:** The number of admissions per patient is shown in the first figure. It shows strong rightskewness which matches our expectation because majority of people do not need to come to hospital frequently. The admission hour is shown in the following figure. The pattern shows that more people are admitted between 2pm to 12am. There is a peak of admission at 7am which might suggest the time the hospital opens to public in general. The highest peak is at 12am which is unusual since I expect less people to go at midnight. The admission minute is shown in the third figure. The overall pattern is roughly even distributed but there are four unusual peak at 0, 15, 30, 45 minutes. I think there might be rounding at these time points. The length of hospital stay is shown in the last figure. The pattern shows that most people stay in hospital for short period which matches our expectation that most people do not need to stay in hospital for long.

```{r}
# summarize the number of admissions per patient by bar plot
admissions_tble |> 
  count(subject_id) |>
  ggplot(aes(x = n)) +
  geom_bar() +
  xlab("Number of admissions") +
  ylab("Number of patients")
```

```{r}
# summarize the admission hour by bar plot
admissions_tble |> 
  mutate(hour = hour(admittime)) |>
  ggplot(aes(x = hour)) +
  geom_bar() +
  xlab("Hour") +
  ylab("Number of admissions")
```

```{r}
# summarize the admission minute by bar plot
admissions_tble |> 
  mutate(minute = minute(admittime)) |>
  ggplot(aes(x = minute)) +
  geom_bar() +
  xlab("Minute") +
  ylab("Number of admissions")
```

```{r}
# summarize the length of hospital stay by bar plot
admissions_tble |> 
  mutate(days = difftime(dischtime, admittime, units = "days")) |>
  ggplot(aes(x = days)) +
  geom_bar() +
  xlab("days") +
  ylab("Number of people")
```

## Q4. `patients` data

Patient information is available in `patients.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/patients/> for details of each field in this file. The first 10 lines are

```{bash}
zcat < ~/mimic/hosp/patients.csv.gz | head
```

### Q4.1 Ingestion

Import `patients.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/patients/>) as a tibble `patients_tble`.

```{r}
#| eval: true

# read in patients information
patients_tble <- read_csv("~/mimic/hosp/patients.csv.gz") |>
  collect()
```

### Q4.2 Summary and visualization

Summarize variables `gender` and `anchor_age` by graphics, and explain any patterns you see.

**Answer:** For variable gender which displays in the first plot, the number of female patients seem to be more than male patients. For variable anchor_age which displays in the second plot, the age of patients is right skewed which means there is higher percentage of younger patients overall. Especially, many patients are under 25 years old.

```{r}
# summarize gender in bar chart
ggplot(data = patients_tble) +
  geom_bar(aes(x = gender))
```

```{r}
# summarize gender in histogram
ggplot(data = patients_tble) +
  geom_histogram(aes(x = anchor_age))
```

## Q5. Lab results

`labevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/labevents/>) contains all laboratory measurements for patients. The first 10 lines are

```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | head
```

`d_labitems.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/d_labitems/>) is the dictionary of lab measurements.

```{bash}
zcat < ~/mimic/hosp/d_labitems.csv.gz | head
```

We are interested in the lab measurements of creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931). Retrieve a subset of `labevents.csv.gz` that only containing these items for the patients in `icustays_tble`. Further restrict to the last available measurement (by `storetime`) before the ICU stay. The final `labevents_tble` should have one row per ICU stay and columns for each lab measurement.

![](labevents_tble.png)

Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `labevents_pq` folder available at the current working directory `hw3`, for example, by a symbolic link.

```{r}
# read in lab measurements and remove unnecessary measurements
dlabitems_tble <- read_csv("~/mimic/hosp/d_labitems.csv.gz") |>
  mutate(label = gsub(" ", "_", label)) |>
  filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931))
```

```{r}
# create a dictionary for itemid and label
labels <- setNames(dlabitems_tble$label, dlabitems_tble$itemid)
```

```{r}
# read in icustays 
icustays_tble <- read_csv("~/mimic/icu/icustays.csv.gz")
# read in lab events
labevents_tble_orig <- arrow::open_dataset("./labevents_pq") |>
  # select necessary columns
  dplyr::select(subject_id, itemid, valuenum, storetime) |>
  # filter out unnecessary itemid
  dplyr::filter(itemid %in% dlabitems_tble$itemid) |>
  # filter out unnecessary subject_id
  dplyr::filter(subject_id %in% icustays_tble$subject_id) |>
  # convert to tibble
  collect() |>
  # convert item id to actual labels
  mutate(itemid = labels[as.character(itemid)])
```

```{r}
# create labevents_tble 
labevents_tble <- labevents_tble_orig |>
  # join tibble by subject_id
  left_join(
    # select necessary columns in icustay_tble 
    select(icustays_tble, subject_id, stay_id, intime),
    by = "subject_id"
    ) |>
  # filter out storetime that is before intime which is caused by joining 
  # table above. Some people went ICU multiple times
  filter(storetime < intime) |>
  # group by subject_id, stay_id, itemid
  group_by(subject_id, stay_id, itemid) |>
  # within the above group, sort by storetime in ascending order
  arrange(storetime, by_group = TRUE) |>
  # within the above group, slice the last row which is the last 
  # available measurement
  slice_tail(n = 1) |>
  # remove unnecessary columns
  select(-storetime, -intime) |>
  # convert pivot long to pivot wide
  pivot_wider(names_from = itemid, values_from = valuenum) |>
  # change the column names to lower case
  rename_with(tolower) |>
  print(width = Inf)
```



## Q6. Vitals from charted events

`chartevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/chartevents/>) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient's information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are

```{bash}
zcat < ~/mimic/icu/chartevents.csv.gz | head
```

`d_items.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/d_items/>) is the dictionary for the `itemid` in `chartevents.csv.gz`.

```{bash}
zcat < ~/mimic/icu/d_items.csv.gz | head
```

We are interested in the vitals for ICU patients: heart rate (220045), systolic non-invasive blood pressure (220179), diastolic non-invasive blood pressure (220180), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items for the patients in `icustays_tble`. Further restrict to the first vital measurement within the ICU stay. The final `chartevents_tble` should have one row per ICU stay and columns for each vital measurement.

![](chartevents_tble.png){width="2523"}

Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `chartevents_pq` folder available at the current working directory, for example, by a symbolic link.

```{r}
# read in vitals and remove unnecessary measurements
ditems_tble <- read_csv("~/mimic/icu/d_items.csv.gz") |>
  # replace space in label with underscore
  mutate(label = gsub(" ", "_", label)) |>
  # filter out unnecessary itemid
  filter(itemid %in% c(220045, 220179, 220180, 223761, 220210))
# create a dictionary for id of vital and vital
labels <- setNames(ditems_tble$label, ditems_tble$itemid)
```

```{r}
# read in icustays
icustays_tble <- read_csv("~/mimic/icu/icustays.csv.gz")
# read in chart events
chartevents_tble_orig <- arrow::open_dataset("./chartevents_pq") |>
  # select necessary columns
  dplyr::select(subject_id, stay_id, itemid, valuenum, charttime) |>
  # filter out unnecessary itemid
  dplyr::filter(itemid %in% ditems_tble$itemid) |>
  # filter out unnecessary subject_id
  dplyr::filter(stay_id %in% icustays_tble$stay_id) |>
  # convert to tibble
  collect() |>
  # convert item id to actual labels (vitals)
  mutate(itemid = labels[as.character(itemid)])
```

```{r}
# create chartevents_tble
charevents_tble <- chartevents_tble_orig |>
  # join tibble by stay_id
  left_join(
    # select necessary columns in icustay_tble
    select(icustays_tble, stay_id, intime, outtime),
    by = "stay_id"
    ) |>
  # filter out charttime that is during icu stay
  filter(charttime >= intime, charttime <= outtime) |>
  # group by stay_id, itemid
  group_by(stay_id, itemid) |>
  # within the above group, sort by charttime in ascending order
  arrange(charttime, by_group = TRUE) |>
  # within the above group, slice the first row which is the first vital
  slice_head(n = 1) |>
  # remove unnecessary columns
  select(-charttime, -intime, -outtime) |>
  # convert pivot long to pivot wide
  pivot_wider(names_from = itemid, values_from = valuenum) |>
  # change the column names to lower case
  rename_with(tolower) |>
  # sort by subject_id, stay_id in ascending order
  arrange(subject_id, stay_id) |>
  print(width = Inf)
```



## Q7. Putting things together

Let us create a tibble `mimic_icu_cohort` for all ICU stays, where rows are all ICU stays of adults (age at `intime` \>= 18) and columns contain at least following variables

-   all variables in `icustays_tble`\
-   all variables in `admissions_tble`\
-   all variables in `patients_tble`
-   the last lab measurements before the ICU stay in `labevents_tble`
-   the first vital measurements during the ICU stay in `chartevents_tble`

The final `mimic_icu_cohort` should have one row per ICU stay and columns for each variable.

![](mimic_icu_cohort.png)

```{r}
# read in necessary data and convert some of them to tibble
patients_tble <- read_csv("~/mimic/hosp/patients.csv.gz") |>
  collect()
admissions_tble <- read_csv("~/mimic/hosp/admissions.csv.gz") |>
  collect()
icustays_tble <- read_csv("~/mimic/icu/icustays.csv.gz")
```

```{r}
# join all the necessary tibbles
mimic_icu_cohort <- icustays_tble |>
  left_join(admissions_tble, by = c("subject_id", "hadm_id")) |>
  left_join(patients_tble, by = "subject_id") |>
  left_join(labevents_tble, by = c("subject_id", "stay_id")) |>
  left_join(charevents_tble, by = c("subject_id", "stay_id")) |>
  # create a new variable age_intime which represents the age at intime
  mutate(age_intime = anchor_age + (year(intime) - anchor_year)) |>
  # filter out age at in time greater 18
  filter(age_intime >= 18) |>
  print(width = Inf)
```

## Q8. Exploratory data analysis (EDA)

Summarize the following information about the ICU stay cohort `mimic_icu_cohort` using appropriate numerics or graphs:

-   Length of ICU stay `los` vs demographic variables (race, insurance, marital_status, gender, age at intime)

```{r}
ggplot(data = mimic_icu_cohort) + 
  geom_jitter(mapping = aes(x = age_intime, y = los, color = insurance)) 
```

```{r}
ggplot(data = mimic_icu_cohort) + 
  geom_col(mapping = aes(x = marital_status, y = los, fill = gender)) 
```

```{r}
# For race, combine all string start with ASIAN
mimic_icu_cohort <- mimic_icu_cohort |> 
  mutate(race = as.factor(race)) |> # Ensure race is a factor
  mutate(race = fct_collapse(
    race,
    ASIAN = str_subset(race, "ASIAN"),
    BLACK = str_subset(race, "BLACK"),
    HISPANIC = str_subset(race, "HISPANIC"),
    WHITE = str_subset(race, "WHITE"),
    UNKNOWN = c("UNABLE TO OBTAIN", "PATIENT DECLINED TO ANSWER"),
    OTHER = c("AMERICAN INDIAN/ALASKA NATIVE", "MULTIPLE RACE/ETHNICITY", 
              "NATIVE HAWAIIAN OR OTHER PACIFIC ISLANDER", "PORTUGUESE", 
              "SOUTH AMERICAN")
  ))
```

```{r}
ggplot(data = mimic_icu_cohort) + 
  geom_boxplot(mapping = aes(x = race, y = los, fill = race)) +
  theme(legend.position = "none") +
  coord_flip() +
  ylab('Length of Stay')
  
```

-   Length of ICU stay `los` vs the last available lab measurements before ICU stay

```{r}
dlabitems_tble <- read_csv("~/mimic/hosp/d_labitems.csv.gz") |>
  mutate(label = gsub(" ", "_", label)) |>
  filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931))
```

```{r}
labels_lab <- setNames(dlabitems_tble$label, dlabitems_tble$itemid)
```

```{r}
for (name in names(labels_lab)) { 
  lab_measure = tolower(labels_lab[name])
  plot <- ggplot(data = mimic_icu_cohort) + 
    geom_point(mapping = aes(x = !!sym(lab_measure), y = los)) +
    ylab('Length of Stay')
  print(plot)
}
```

-   Length of ICU stay `los` vs the first vital measurements within the ICU stay

```{r}
ditems_tble <- read_csv("~/mimic/icu/d_items.csv.gz") |>
  mutate(label = gsub(" ", "_", label)) |>
  filter(itemid %in% c(220045, 220179, 220180, 223761, 220210))
labels_vitals <- setNames(ditems_tble$label, ditems_tble$itemid)
```

```{r}
for (name in names(labels_vitals)) { 
  vital = tolower(labels_vitals[name])
  plot <- ggplot(data = mimic_icu_cohort) + 
    geom_point(mapping = aes(x = !!sym(vital), y = los)) +
    ylab('Length of Stay')
  print(plot)
}
```

-   Length of ICU stay `los` vs first ICU unit

```{r}
ggplot(data = mimic_icu_cohort) + 
  geom_boxplot(mapping = aes(x = first_careunit, y = los, 
                             fill = first_careunit)) +
  theme(legend.position = "bottom") +
  guides(fill = guide_legend(nrow = 3, ncol = 3)) +
  coord_flip() +
  xlab('Length of Stay') +
  ylab('') +
  labs(title = "Length of ICU stay versus first ICU unit", fill = "ICU Unit")
  

```
